using {{projectname}}.{{domainname}}s.Dtos;
using {{projectname}}.EntityFrameworkCore;
using Dedsi.Ddd.Domain.Queries;
using Dedsi.EntityFrameworkCore.Queries;
using Microsoft.EntityFrameworkCore;
using Volo.Abp.EntityFrameworkCore;

namespace {{projectname}}.{{domainname}}s.Queries;

/// <summary>
/// Create {{domainname}} Command
/// </summary>
public interface I{{domainname}}Query : IDedsiQuery
{
    /// <summary>
    ///
    /// </summary>
    /// <param name="id"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    Task<{{domainname}}Dto> GetAsync(Guid id, CancellationToken cancellationToken);

    /// <summary>
    /// 
    /// </summary>
    /// <param name="input"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    Task<{{domainname}}PagingQueryResultDto> PagingQueryAsync({{domainname}}PagingQueryInputDto input, CancellationToken cancellationToken);
}

/// <summary>
/// {{domainname}}
/// </summary>
/// <param name="dbContextProvider"></param>
public class {{domainname}}Query(IDbContextProvider<{{projectname}}DbContext> dbContextProvider)
    : DedsiEfCoreQuery<{{projectname}}DbContext>(dbContextProvider),
        I{{domainname}}Query
{
    /// <inheritdoc />
    public async Task<{{domainname}}PagingQueryResultDto> PagingQueryAsync({{domainname}}PagingQueryInputDto input, CancellationToken cancellationToken)
    {
        var dbContext = await GetDbContextAsync();
        
        return new {{domainname}}PagingQueryResultDto()
        {
        
        };
    }
    
    /// <inheritdoc />
    public async Task<{{domainname}}Dto> GetAsync(Guid id, CancellationToken cancellationToken)
    {
        var dbContext = await GetDbContextAsync();
        
        return new {{domainname}}Dto()
        {
        
        };
    }
}