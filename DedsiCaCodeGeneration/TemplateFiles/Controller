using {{projectname}}.{{domainname}}s.CommandHandlers;
using {{projectname}}.{{domainname}}s.Dtos;
using {{projectname}}.{{domainname}}s.Queries;
using Dedsi.Ddd.CQRS.Mediators;
using Microsoft.AspNetCore.Mvc;

namespace {{projectname}}.{{domainname}}s;

/// <summary>
/// {{domainname}}
/// </summary>
/// <param name="dedsiMediator"></param>
/// <param name="{{humpdomainname}}Query"></param>
public class {{domainname}}Controller(
    IDedsiMediator dedsiMediator,
    I{{domainname}}Query {{humpdomainname}}Query)
    : {{projectname}}Controller
{
    /// <summary>
    /// Create
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpPost]
    public Task<bool> CreateAsync(Create{{domainname}}InputDto input)
    {
        return dedsiMediator.SendAsync(new Create{{domainname}}Command(input), HttpContext.RequestAborted);
    }
    
    /// <summary>
    /// Delete 
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    [HttpPost("{id}")]
    public Task<bool> DeleteAsync(Guid id)
    {
        return dedsiMediator.SendAsync(new Delete{{domainname}}Command(id), HttpContext.RequestAborted);
    }

    /// <summary>
    /// Update
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpPost]
    public Task<bool> UpdateAsync(Update{{domainname}}InputDto input)
    {
        return dedsiMediator.SendAsync(new Update{{domainname}}Command(input.Id), HttpContext.RequestAborted);
    }
    
    /// <summary>
    /// Get
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    [HttpGet("{id}")]
    public Task<{{domainname}}Dto> GetAsync(Guid id)
    {
        return {{humpdomainname}}Query.GetAsync(id, HttpContext.RequestAborted);
    }

    /// <summary>
    /// Paging Query
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpPost]
    public Task<{{domainname}}PagingQueryResultDto> PagingQueryAsync({{domainname}}PagingQueryInputDto input)
    {
        return {{humpdomainname}}Query.PagingQueryAsync(input, HttpContext.RequestAborted);
    }

    /// <summary>
    /// Export By Paging Query
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpPost]
    public async Task<IActionResult> ExportByPagingQueryAsync({{domainname}}PagingQueryInputDto input)
    {
        input.IsExport = true;
        var result = await DraftPagingQueryAsync(input);

        var memoryStream = new MemoryStream();
        return File(memoryStream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "ExportByPagingQuery.xlsx");
    }
    
}