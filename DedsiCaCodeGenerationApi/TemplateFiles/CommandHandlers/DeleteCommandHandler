using {{projectname}}.Repositories.{{domainname}}s;
using Dedsi.Ddd.CQRS.CommandHandlers;
using Dedsi.Ddd.CQRS.Commands;
using FluentValidation;

namespace {{projectname}}.{{domainname}}s.CommandHandlers;

/// <summary>
/// Delete {{domainname}} Command
/// </summary>
public record Delete{{domainname}}Command(Guid Id): DedsiCommand<bool>;

/// <summary>
/// Create {{domainname}} Command Validator
/// </summary>
public class Delete{{domainname}}CommandValidator : AbstractValidator<Delete{{domainname}}Command>
{
    public Delete{{domainname}}CommandValidator()
    {

    }
}

/// <summary>
/// Delete{{domainname}}Command Handler
/// </summary>
/// <param name="{{humpdomainname}}Repository">{{domainname}}</param>
public class Delete{{domainname}}CommandHandler(I{{domainname}}Repository {{humpdomainname}}Repository): DedsiCommandHandler<Delete{{domainname}}Command, bool>
{
    public override async Task<bool> Handle(Delete{{domainname}}Command command, CancellationToken cancellationToken)
    {
        await {{humpdomainname}}Repository.DeleteAsync(a => a.Id == command.Id, false, cancellationToken);
        
        return true;
    }
}